name: Build and Push Frontend Docker Image

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE_NAME: huyenthai01/messaging-frontend
  TAG_NAME: latest

jobs:
  docker-image-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE="${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA"
          LATEST="${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"
          docker build -t "$IMAGE" -t "$LATEST" ./messaging-app


      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          docker push "${{ env.DOCKER_IMAGE_NAME }}:$SHORT_SHA"
          docker push "${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG_NAME }}"
  
  # e2e-tests:
  #     runs-on: ubuntu-latest

  #     env:
  #       Jwt__Key: ${{ secrets.JWT_KEY }}
  #       ConnectionStrings__AuthDb: ${{ secrets.E2E_AUTH_DB_CONNECTION }}
  #       ConnectionStrings__UserDb: ${{ secrets.E2E_USER_DB_CONNECTION }}
  #       AzureBlob__ConnectionString: ${{ secrets.E2E_AZURE_BLOB_CONNECTION }}
  #       RabbitMq__User: ${{ secrets.E2E_RABBITMQ_USER }}
  #       RabbitMq__Password: ${{ secrets.E2E_RABBITMQ_PASSWORD }}
  #       DB_PASSWORD: ${{ secrets.DB_PASSWORD }}


  #     steps:
  #       - uses: actions/checkout@v3
  #       - name: Print ENV (for debug only!)
  #         run: |
  #           echo "Jwt__Key: $Jwt__Key"
  #           echo "AuthDb: $ConnectionStrings__AuthDb"
  #           echo "UserDb: $ConnectionStrings__UserDb"
  #           echo "DB_PASSWORD: $DB_PASSWORD"

  #       - name: Start containers for Cypress tests
  #         run: docker compose -f docker-compose.e2e.yml up -d
          
  #       - name: Wait for RabbitMQ to be healthy
  #         run: |
  #           echo "Waiting for RabbitMQ..."
  #           for i in {1..20}; do
  #             status=$(docker inspect --format='{{.State.Health.Status}}' $(docker ps -qf "name=rabbitmq"))
  #             echo "Health status: $status"
  #             [ "$status" = "healthy" ] && break
  #             sleep 5
  #           done
  #           if [ "$status" != "healthy" ]; then
  #             echo " RabbitMQ is not healthy in time." >&2
  #             exit 1
  #           fi


  #       - name: Show auth-service logs
  #         run: docker logs $(docker ps -a -qf "name=auth-service") || true

  #       - name: Show user-service logs
  #         run: docker logs $(docker ps -a -qf "name=user-service") || true

  #       - name: Wait for frontend to be ready
  #         uses: jakejarvis/wait-action@v0.1.1
  #         with:
  #           url: http://localhost:8081
  #           timeout: 60

  #       - name: List running containers
  #         run: docker ps -a


  #       - name: Setup Node.js
  #         uses: actions/setup-node@v3
  #         with:
  #           node-version: 20

  #       - name: Install dependencies
  #         run: |
  #           cd messaging-app
  #           npm ci
  #       - name: Install Axios
  #         run: npm install axios

  #       - name: Seed test data
  #         run: node messaging-app/cypress/test-setup.js

  #       - name: Curl test for signup
  #         run: |
  #           curl -X POST http://localhost:5000/api/auth/signup \
  #             -H "Content-Type: application/json" \
  #             -d '{"email":"test@ci.com", "password":"Test123", "username":"Test"}' -v

  #       - name: Run Cypress tests
  #         uses: cypress-io/github-action@v5
  #         with:
  #           working-directory: messaging-app
  #           config: baseUrl=http://localhost:8081
  #           wait-on: http://localhost:8081

  #       - name: Shut down test stack
  #         if: always()
  #         run: docker compose -f docker-compose.e2e.yml down